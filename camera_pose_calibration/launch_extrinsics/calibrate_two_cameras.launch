<launch>
  <arg name="camera1_name" default="workspace_camera_right" />
  <arg name="camera2_name" default="wrist_camera" />
  <arg name="camera1_ns" default="$(arg camera1_name)/rgb" />
  <arg name="camera2_ns" default="$(arg camera2_name)/rgb" />
  <arg name="checker_rows" default="4"/>
  <arg name="checker_cols" default="5"/>
  <arg name="checker_size" default="0.038"/>
  <arg name="headless" default="false" />

  <!-- checkerboard detector for each camera -->
  <include file="$(find camera_pose_calibration)/blocks/rgb_block.launch">
    <arg name="ns" value="$(arg camera1_ns)" />
    <arg name="checker_rows" value="$(arg checker_rows)" />
    <arg name="checker_cols" value="$(arg checker_cols)" />
    <arg name="checker_size" value="$(arg checker_size)" />
  </include>
  <include file="$(find camera_pose_calibration)/blocks/rgb_block.launch">
    <arg name="ns" value="$(arg camera2_ns)" />
    <arg name="checker_rows" value="$(arg checker_rows)" />
    <arg name="checker_cols" value="$(arg checker_cols)" />
    <arg name="checker_size" value="$(arg checker_size)" />
  </include>
  
  <!-- image_proc nodes for each camera to remove the distortion -->
  <node pkg="image_proc" type="image_proc"
      ns="$(arg camera1_ns)"
      name="$(arg camera1_name)_image_proc">
  </node>
  <node pkg="image_proc" type="image_proc"
      ns="$(arg camera2_ns)"
      name="$(arg camera2_name)_image_proc">
  </node>

  
  <!-- find time intervals where all camera's see a checkerboard -->  
  <node type="interval_intersection_action" pkg="interval_intersection" name="interval_intersection" output="screen" />
  <node pkg="camera_pose_calibration" type="start_interval_intersection.py" name="start_interval_intersection"
        args="$(arg camera1_ns) $(arg camera2_ns)" output="screen" />
  <node pkg="camera_pose_calibration" type="filter_intervals.py" name="filter_intervals">
     <param name="min_duration" value="1.0" />
     <remap from="features" to="$(arg camera1_ns)/features" />
     <remap from="interval" to="intersected_interval"/>
  </node>


  <!-- generate robot measurements -->
  <node pkg="camera_pose_calibration" type="multicam_capture_exec.py" name="capture_exec" 
        args="$(arg camera1_ns) $(arg camera2_ns)" output="screen">
    <param name="cam_info_topic" value="camera_info" />
    <remap from="request_interval" to="interval_filtered" />
  </node>


  <!-- optimize camera poses -->
  <node type="run_optimization_online.py" pkg="camera_pose_calibration" name="cal_optimizer" output="screen"/>


  <!-- Visualization -->
  <node type="capture_monitor.py" pkg="camera_pose_calibration" name="capture_monitor" output="screen"
        args="$(arg camera1_ns) $(arg camera2_ns)" >
        <remap from="$(arg camera1_ns)/image_throttle" to="$(arg camera1_ns)/image_color" />
        <remap from="$(arg camera2_ns)/image_throttle" to="$(arg camera2_ns)/image_color" />
  </node>

  <node unless="$(arg headless)" type="image_view" pkg="image_view" name="aggregated_image_viewer" >
     <remap from="image" to="aggregated_image" />
  </node>
  
  <!-- The static pose of the checkerboard -->
  <node pkg="tf" type="static_transform_publisher" name="checkerboard_publisher" args="0.448 -0.038 -0.05 -3.14 0 -3.14 /base_link /checkerboard_id 100" />

  <node type="stamina_calibration_transform_publisher.py"
        pkg="camera_pose_calibration"
        name="stamina_calibration_transform_publisher"
        args="./ur10.urdf /wrist_camera_rgb_optical_frame:wrist_camera_frame_joint /workspace_camera_right_rgb_optical_frame:workspace_camera_right_frame_joint"
        output="screen"/>

</launch>
